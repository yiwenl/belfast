import "../scss/global.scss";

import {
  GL,
  GLTool,
  GLShader,
  CameraPerspective,
  Draw,
  DrawAxis,
  DrawDotsPlane,
  OrbitalControl,
} from "../../src/alfrid";
import { vec3, mat4 } from "gl-matrix";
import Scheduler from "scheduling";

import vs from "../shaders/test.vert";
import fs from "../shaders/test.frag";

const canvas1 = document.createElement("canvas");
const canvas2 = document.createElement("canvas");
document.body.appendChild(canvas1);
document.body.appendChild(canvas2);

GL.init(canvas1);
GL.setSize(window.innerWidth / 2, window.innerHeight);
console.log(GL);

const s = 2;
const mtx = mat4.create();
mat4.scale(mtx, mtx, [s, s, s]);

const GL2 = new GLTool();
const ctx2 = canvas2.getContext("webgl");
GL2.init(ctx2);
GL2.setSize(window.innerWidth / 2, window.innerHeight);

const draw1 = Math.random() > 0.5;

const positions = [[-1, 1, 0], [1, 1, 0], [-1, -1, 0], [1, -1, 0]];
const uvs = [[0, 0], [1, 0], [0, 1], [1, 1]];
const indices = [2, 1, 0, 2, 3, 1];

const draw = new Draw(draw1 ? GL : GL2);
draw
  .useProgram(vs, fs)
  .createMesh()
  .bufferVertex(positions)
  .bufferTexCoord(uvs)
  .bufferIndex(indices);

// helpers
const drawAxis = new DrawAxis(draw1 ? GL : GL2);
const drawDotsPlane = new DrawDotsPlane(draw1 ? GL : GL2);

// camera
const camera = new CameraPerspective(
  Math.PI / 2,
  GL.getAspectRatio(),
  0.1,
  100
);

camera.lookAt([2, 2, 5], [0, 0, 0], [0, 1, 0]);
new OrbitalControl(camera, window, 8);
Scheduler.addEF(render);
// render();

function render() {
  let g = 0.1;
  GL.clear(g, 0, 0, 1);
  GL2.clear(0, g, 0, 1);

  /*
   * Shader and Mesh ( buffers ) won't be created until they are going to be bind
   * They'll be generated by the WebGL context that it binds or draws
   */
  if (draw1) {
    GL.setMatrices(camera);
    drawAxis.draw();
    drawDotsPlane.draw();

    GL.setModelMatrix(mtx);
    draw.draw();
  } else {
    GL2.setMatrices(camera);
    drawAxis.draw();
    drawDotsPlane.draw();

    GL2.setModelMatrix(mtx);
    draw.draw();
  }
}

// resize
window.addEventListener("resize", resize);

function resize() {
  GL.setSize(window.innerWidth / 2, window.innerHeight);
  GL2.setSize(window.innerWidth / 2, window.innerHeight);
}
